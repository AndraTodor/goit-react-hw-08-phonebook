{"version":3,"file":"static/js/929.3ede5ecf.chunk.js","mappings":"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","sources":["components/ContactForm.jsx","components/Contact.jsx","redux/filters/selectors.js","redux/contacts/selectors.js","components/ContactList.jsx","components/SearchBox.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Field, Form, Formik, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport { useId } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../redux/contacts/operations';\nimport toast from 'react-hot-toast';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const onAddContact = newContact => {\n    dispatch(addContact(newContact))\n      .unwrap()\n      .then(() => {\n        toast.success('Contact added successfully!');\n      });\n  };\n\n  const initialValues = { name: '', number: '' };\n  const nameFieldId = useId();\n  const numberFieldId = useId();\n  const addContactSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(3, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Required!'),\n    number: Yup.number()\n      .min(7, 'Too Short!')\n      .required('Required!')\n      .typeError('Enter phone-number!'),\n  });\n\n  const handleFormSubmit = (values, actions) => {\n    onAddContact(values);\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleFormSubmit}\n      validationSchema={addContactSchema}\n    >\n      <Form className=\"space-y-6 bg-white p-6 shadow-md rounded-lg\">\n        <div>\n          <label htmlFor={nameFieldId} className=\"block mb-1 text-gray-600\">\n            Name\n          </label>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            id={nameFieldId}\n            className=\"w-full border border-gray-300 p-2 rounded\"\n          />\n          <ErrorMessage\n            name=\"name\"\n            component=\"span\"\n            className=\"text-red-500 text-sm\"\n          />\n        </div>\n        <div>\n          <label htmlFor={numberFieldId} className=\"block mb-1 text-gray-600\">\n            Phone\n          </label>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            id={numberFieldId}\n            className=\"w-full border border-gray-300 p-2 rounded\"\n          />\n          <ErrorMessage\n            name=\"number\"\n            component=\"span\"\n            className=\"text-red-500 text-sm\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition\"\n        >\n          Add Contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { ImPhone, ImUser } from 'react-icons/im';\nconst Contact = ({ name, phone, deleteContacts, id }) => {\n  return (\n    <li className=\"flex justify-between items-center p-4 bg-white shadow-md rounded-lg mb-3\">\n      <div className=\"flex space-x-4 items-center\">\n        <ImUser className=\"text-gray-500\" size=\"24\" />\n        <p className=\"font-medium\">{name}</p>\n      </div>\n      <div className=\"flex space-x-4 items-center\">\n        <ImPhone className=\"text-gray-500\" size=\"20\" />\n        <p>{phone}</p>\n      </div>\n      <button\n        type=\"button\"\n        className=\"bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition\"\n        onClick={() => deleteContacts(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default Contact;\n","export const selectFilterValue = state => state.filters.name;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterValue } from '../filters/selectors';\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsItems = state => state.contacts.items;\nexport const selectFilteredContacts = createSelector(\n  [selectContactsItems, selectFilterValue],\n  (contacts, filterValue) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport Contact from './Contact';\n\nimport { deleteContact } from '../redux/contacts/operations';\nimport { selectFilteredContacts } from '../redux/contacts/selectors';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  if (filteredContacts.length === 0) {\n    return;\n  }\n  return (\n    <>\n      <ul className=\"space-y-3\">\n        {filteredContacts.map(({ id, name, number }) => (\n          <Contact\n            key={id}\n            id={id}\n            name={name}\n            phone={number}\n            deleteContacts={contactId => {\n              dispatch(deleteContact(contactId))\n                .unwrap()\n                .then(() => toast.success('Contact deleted successfully!'));\n            }}\n          />\n        ))}\n      </ul>\n      <Toaster />\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useId } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from '../redux/filters/slice';\nimport { selectFilterValue } from '../redux/filters/selectors';\nconst SearchBox = () => {\n  const searchInputId = useId();\n  const dispatch = useDispatch();\n  const filterName = useSelector(selectFilterValue);\n  const handleFilter = value => {\n    dispatch(setFilterValue(value));\n  };\n  return (\n    <div className=\"space-y-3\">\n      <label htmlFor={searchInputId} className=\"block text-gray-600\">\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        name=\"search\"\n        id={searchInputId}\n        value={filterName}\n        onChange={e => handleFilter(e.target.value)}\n        className=\"w-full border border-gray-300 p-2 rounded\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport SearchBox from '../components/SearchBox';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const { items, loading, error } = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .then(() => {\n        toast.success('Phonebook loaded successfully!');\n      });\n  }, [dispatch]);\n  return (\n    <>\n      {loading && <h2>Loading...</h2>}\n      {error && <h2>{error}</h2>}\n      <Toaster />\n      <ContactForm />\n      <SearchBox />\n\n      {items.length > 0 ? (\n        <ContactList />\n      ) : (\n        <p>You don&apos;t have contacts yet!</p>\n      )}\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","dispatch","useDispatch","nameFieldId","useId","numberFieldId","addContactSchema","Yup","shape","name","min","max","required","number","typeError","_jsx","Formik","initialValues","onSubmit","handleFormSubmit","values","actions","newContact","addContact","unwrap","then","toast","resetForm","validationSchema","children","_jsxs","Form","className","htmlFor","Field","type","id","ErrorMessage","component","_ref","phone","deleteContacts","ImUser","size","ImPhone","onClick","selectFilterValue","state","filters","selectContacts","contacts","selectFilteredContacts","createSelector","items","filterValue","filter","contact","toLowerCase","includes","ContactList","filteredContacts","useSelector","length","_Fragment","map","Contact","contactId","deleteContact","Toaster","SearchBox","searchInputId","filterName","value","onChange","e","handleFilter","target","setFilterValue","ContactsPage","loading","error","useEffect","fetchContacts"],"sourceRoot":""}